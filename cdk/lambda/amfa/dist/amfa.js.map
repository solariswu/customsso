{
  "version": 3,
  "sources": ["../amfa.mjs", "../utils/amfaSteps.mjs", "../utils/fetchConfigData.mjs", "../utils/fetchCode.mjs", "../utils/passwordlessLogin.mjs"],
  "sourcesContent": ["import {\n  CognitoIdentityProviderClient,\n} from '@aws-sdk/client-cognito-identity-provider';\n\nimport { amfaSteps } from \"./utils/amfaSteps.mjs\";\n\n\nconst validateInputParams = (payload) => {\n  // check required params here\n  switch (payload.phase) {\n    case 'username':\n      return (payload && payload.email &&\n        payload.apti && payload.rememberDevice && payload.authParam);\n    case 'password':\n      return (payload && payload.email && payload.password &&\n        payload.apti && payload.rememberDevice && payload.authParam);\n    case 'sendotp':\n      return (payload && payload.otpaddr && payload.otptype &&\n        payload.apti && payload.rememberDevice && payload.authParam);\n    case 'verifyotp':\n      return (payload && payload.email && payload.otpcode && payload.otptype &&\n        payload.apti && payload.rememberDevice && payload.authParam);\n    default:\n      break;\n  }\n\n  return false;\n};\n\nconst headers = {\n  'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With',\n  'Access-Control-Allow-Origin': `https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,\n  'Access-Control-Allow-Methods': 'OPTIONS,GET,POST',\n  'Access-Control-Expose-Headers': 'Set-Cookie',\n  'Access-Control-Allow-Credentials': 'true',\n};\n\nconst response = (statusCode = 200, body) => {\n  return {\n    statusCode,\n    headers,\n    body,\n  };\n};\n\nconst client = new CognitoIdentityProviderClient({ region: process.env.AWS_REGION, });\n\nconst getIPFromHeader = (fwdfor) => {\n  const IPs = fwdfor.split(',');\n  return IPs[0];\n}\n// lambda for rest api\nexport const handler = async (event) => {\n  console.log('Received event:', JSON.stringify(event, null, 2));\n\n  const requestId = Math.random().toString(36).substring(2, 16) + Math.random().toString(36).substring(2, 16);\n\n  let error = '';\n\n  try {\n    const payload = JSON.parse(event.body);\n\n    console.log('payload', payload);\n\n    if (payload && validateInputParams(payload)) {\n\n      const ipAddress = getIPFromHeader(\n        event.headers['X-Forwarded-For'].trim()\n      );\n      // const origin = event.headers['origin']?.trim();\n\n      // if (\n      //   origin !== `https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`\n      // ) {\n      //   return response(403, JSON.stringify({ message: 'origin not allowed' }));\n      // }\n\n      let oneEvent = {};\n      oneEvent.uIP = ipAddress;\n      oneEvent.email = payload.email;\n      oneEvent.apti = payload.apti;\n      oneEvent.rememberDevice = payload.rememberDevice;\n      oneEvent.authParam = payload.authParam;\n      oneEvent.origin = `${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`;\n      oneEvent.otptype = payload.otptype;\n      oneEvent.otpcode = payload.otpcode;\n      oneEvent.otpaddr = payload.otpaddr;\n      oneEvent.redirectUri = payload.redirectUri;\n      oneEvent.state = payload.state;\n      oneEvent.requestTimeEpoch = event.requestContext.requestTimeEpoch;\n\n      // todo fetch cookie from header\n      oneEvent.cookies = event.headers['Cookie'];\n      console.log('oneEvent', oneEvent);\n\n      switch (payload.phase) {\n        case 'username':\n          const stepOneResponse = await amfaSteps(oneEvent, headers, client, 1);\n          return stepOneResponse;\n        case 'password':\n          const stepTwoResponse = await amfaSteps(oneEvent, headers, client, 2);\n          return stepTwoResponse;\n        case 'sendotp':\n          const stepThreeResponse = await amfaSteps(oneEvent, headers, client, 3);\n          return stepThreeResponse;\n        case 'verifyotp':\n          const stepFourResponse = await amfaSteps(oneEvent, headers, client, 4);\n          return stepFourResponse;\n        default:\n          break;\n      }\n    } else {\n      error = 'incoming params error.';\n    }\n\n\n  } catch (err) {\n    console.log(err);\n    return response(\n      err.statusCode ? err.statusCode : 500,\n      JSON.stringify({\n        message: 'input param parse error',\n      })\n    );\n  }\n\n  return response(500, JSON.stringify({ message: error }));\n};\n", "// This file contains the aPersona MFA settings for the initial passwordless auth transaction verification. (Only available with a local EPND Login.)\n// NOTE: If a user elects to login via LSRI, this script will not be run, it will be skipped.\n//\nimport {\n  AdminListGroupsForUserCommand,\n  ListUsersCommand\n} from '@aws-sdk/client-cognito-identity-provider';\n\nimport { createHash } from 'node:crypto';\nimport { fetchConfigData } from './fetchConfigData.mjs';\nimport { fetchCode } from './fetchCode.mjs';\nimport { passwordlessLogin } from './passwordlessLogin.mjs';\n\nexport const amfaSteps = async (event, headers, cognito, step) => {\n\n  const response = (statusCode, body) => {\n    return {\n      isBase64Encoded: false,\n      statusCode,\n      headers,\n      body: JSON.stringify({ message: body }),\n    };\n  };\n\n  const cookieEnabledHeaders = {\n    'Access-Control-Allow-Headers': 'Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With',\n    'Access-Control-Allow-Origin': `https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,\n    'Access-Control-Allow-Methods': 'OPTIONS,GET,POST',\n    'Access-Control-Expose-Headers': 'Set-Cookie',\n    'Access-Control-Allow-Credentials': 'true',\n  };\n\n  function hash(content) {\n    return createHash('md5').update(content).digest('hex');\n  }\n\n  try {\n    const [tenantData, amfaConfigs] = await fetchConfigData();\n    // API vars saved in node.js property file in the back-end node.js\n    const salt = amfaConfigs.salt; // Pull this from a property file. All MFA services will use this same salt to read and write the one_time_token-Cookie.\n\n    const asmurl = 'https://asm2.apersona.com:8443/asm';  // Url of the Adaptive MFA Server.\n\n    const listUsersParam = {\n      UserPoolId: process.env.USERPOOL_ID,\n      Filter: \"email = \\\"\" + event.email + \"\\\"\",\n    };\n\n    const listUsersRes = await cognito.send(new ListUsersCommand(listUsersParam));\n\n    if (!listUsersRes || !listUsersRes.Users || listUsersRes.Users.length === 0) {\n      console.log('Did not find valid user for email:', event.email);\n      return response(500, 'Did not find valid user for this email');\n    };\n\n    const users = listUsersRes.Users.filter((user) => {\n      return user.UserStatus === 'CONFIRMED';\n    });\n\n    if (users.length === 0) {\n      console.log('Did not find valid user for email:', event.email);\n      return response(500, 'Did not find valid user for this email');\n    };\n\n    console.log('UserAttributes:', users[0].Attributes);\n    const user = users[0];\n\n    const userAttributes = user.Attributes.reduce((acc, curr) => {\n      acc[curr.Name] = curr.Value;\n      return acc;\n    });\n\n    const param = {\n      UserPoolId: process.env.USERPOOL_ID,\n      Username: users[0].Username,\n    };\n\n    const userGroup = await cognito.send(new AdminListGroupsForUserCommand(param));\n    console.log('userGroup:', userGroup);\n\n    if (!userGroup || !userGroup.Groups || userGroup.Groups.length === 0) {\n      console.log('Did not find a valid user group');\n      return response(500, 'Did not find a valid user group');\n    }\n\n    const ug = userGroup.Groups[0].GroupName;\n    console.log('ug:', ug);\n\n    const l = tenantData[ug] ? encodeURI(tenantData[ug]) : '';\n\n    if (l === '') {\n      console.log('Did not find a valid ASM Policy for the user group:', ug);\n      return response(\n        500,\n        `Did not find a valid ASM Policy for the user group:${ug})`\n      );\n    }\n\n    // This is the ASM Security Policy key. This key needs to be picked up from a NodeJS back-end propery file based on the role of the user based on their email address-keycloak account.\n    // Ex. If user_role=super admin, then l='epnd-su-72ja37bc51mz', ELSE if user_role=cohort owner, then l=asm_policy_for_cohort_owners, etc. etc.\n\n    let wr = event.origin;//'epnd.com'; // This is the domain of the services where MFA is being setup. It must match the domain for the HTTPS URL domain where the cookie is secured.\n    let sfl = 6; // This should be picked up via property file. It should be set to 5 or 6. Can also be set based on user security group. If admin, sfl=6 else sfl=5. Should never be set less than 5.\n\n    // API vars that come from the end-user javascript front-end client via post or cookie read\n    let u = event.email; // email address of the user. Entered from front end web service to login via post.\n    let igd = event.rememberDevice === 'true' ? 0 : 1; // On the main login page, add a checkbox:  [ ] Remember this device, I own it. If checked, set igd = 0 and send it with all related transactions until the login process completes\n    // If it's not checked (default) set igd = 1. This will ensure no forensics are collected on a public terminal or shared devices.\n    // If the user checks the box, then node.js needs to save this preference in the browser under local storage.  see: https://codepen.io/kylastoneberg/pen/qweppq\n    let a = encodeURI(event.authParam);\n    //encodeURI('{\"apersonaKey\":\"36b284dffbd5-956bf51bb14ce-cfd6ce53e8c87d4\",\"deviceType\":\"PC\",\"osInfo\":\"Windows - 7\",\"deviceInfo\":\"device_info_here\",\"browserInfo\":\"Chrome - 32.0.1700.107\",\"webHost\":\"10.5.1.5:8080\",\"pageUrl\":\"/svcs/login.ap\"}');\n    // The a variable is taken from the variable authParam, which is generated client side using the apersona javascript and passed to the backend via post.\n    // The example provide above is an example of what the authParamstring looks like.\n\n    // API vars that are known previously and should be reused\n\n    // API vars that are detected or generated  on the back-end node.js\n    let uIp = event.uIP ? event.uIP : '00000000000'; // This is the client ip address as detected from the NodeJS server. see: https://www.abstractapi.com/guides/node-js-get-ip-address Let's'45.23.45.12'; // This is the client ip address as detected from the NodeJS server. see: https://www.abstractapi.com/guides/node-js-get-ip-address Let's use request.header.\n    let apti = event.apti; // This key needs to be a randon key that is set for each new login process and kept and sent in until the user succeeds or fails their login.\n    let otpm = 'e'; // This is the otp method. The default is e, which stands for email. If users have other methods for verification, this field can be used to set the method. s for sms, v for voice, ae for alt-email.\n    let p = u; // OTP Method value. Making p=u is our default use case to begin with. In order to do other methods, the end user will need a way to manage their other methods, like phone number, alt-email, mobile token.\n\n    // API vars that are hard coded for this type of API call in the back-end node.js\n    let otpp = 1; // OTP PAUSE: This tells asm to not send out an otp, essentially pauses it. For the initial passwordless auth, this should be set and sent.\n    let nsf = 3; // No saving of Forensics:  nsf=0 means ASM will continue to save and update forensics and passwordless auth will auto extend to the policy ttl.\n    // nsf=1 means asm will not save any forensics and as a result, passwordless will expire no matter what on the ttl.\n    // With the next release of ASM, we will be setting nsf=3 which will not save device forensics, but it will contine to update the one time use cookie/token, which is more secure.\n\n    let af1 = u + 'passwordless_check' + uIp; // This is the passwordless behavior tracker.\n    // This var creates a behavior key for passwordless auth. By adding the email and uIP, a user will only be able to use passwordless auth from a known previously used location.\n\n    const amfaCookieName = hash(`${u}${wr}${salt}`);\n    let c = '';\n    if (event.cookies && event.cookies.trim().length > 0) {\n      const startIndex = event.cookies.trim().indexOf(amfaCookieName) + amfaCookieName.length + 1;\n      c = event.cookies.trim().substring(startIndex).split(';')[0];\n    }\n    //'278dcbdee5660876c230650ebb4bd70e';  // For every new MFA Auth login the nodeJS backend needs to read the cookie from teh client if it exists and send it in.\n\n    let tType = encodeURI('Initial passwordless login verification'); // Transaction typelLabel for audit logs.\n    let postURL = asmurl +\n      '/extAuthenticate.kv?l=' +\n      l +\n      '&u=' +\n      u +\n      '&uIp=' +\n      uIp +\n      '&apti=' +\n      apti +\n      '&c=' +\n      c +\n      '&wr=' +\n      wr +\n      '&igd=' +\n      igd +\n      '&otpm=' +\n      otpm +\n      '&p=' +\n      p +\n      '&otpp=' +\n      otpp +\n      '&tType=' +\n      tType +\n      '&af1=' +\n      af1 +\n      '&a=' +\n      a;\n\n    switch (step) {\n      case 1:\n        postURL = postURL + '&sfl=' + sfl + '&nsf=' + nsf;\n        break;\n      case 2:\n        tType = encodeURI('Password verification');\n        break;\n      case 3:\n        tType = encodeURI('OTP resend');\n        otpm = event.otptype;\n        // This is the otp method. The default is e, which stands for email. If users have other methods for verification, this field can be used to set the method. \n        //e for email, s for sms, v for voice, ae for alt-email.\n        p = event.otpaddr;\n        postURL = asmurl + '/extResendOtp.kv?l=' + l + '&u=' + u + '&apti=' + apti + '&otpm=' + otpm + '&p=' + p + '&tType=' + tType\n        break;\n      case 4:\n        let o = event.otpcode;  // This is the otp entered by the end user and provided to the nodejs backend via post.\n        postURL = asmurl + '/extVerifyOtp.kv?l=' + l + '&u=' + u + '&uIp=' + uIp + '&apti=' + apti + '&wr=' + wr + '&igd=' + igd + '&otpm=' + otpm + '&p=' + p + '&otpp=' + otpp + '&tType=' + tType + '&af1=' + af1 + '&a=' + a + '&o=' + o;\n        break;\n      default:\n        break;\n    }\n\n    console.log('now posting to : ', postURL);\n    // Execute the authentication API\n    const amfaResponse = await fetch(postURL, {\n      method: \"POST\"\n    });\n\n    if (amfaResponse && amfaResponse.status) {\n      const amfaResponseJSON = await amfaResponse.json();\n\n      console.log('amfaResponseJSON:', amfaResponseJSON);\n\n      switch (amfaResponseJSON.code) {\n        case 200:\n          switch (step) {\n            case 1:\n            case 2:\n            case 4:\n              if (amfaResponseJSON.message === 'OK') {\n                const url = step === 1 ? await passwordlessLogin(event, cognito) :\n                  await fetchCode(event.email, event.apti);\n                console.log('url:', url);\n                if (url) {\n                  Date.prototype.addDays = function (days) {\n                    var date = new Date(this.valueOf());\n                    date.setDate(date.getDate() + days);\n                    return date;\n                  }\n\n                  var date = new Date();\n                  const cookieValue = `${amfaCookieName}=${amfaResponseJSON.identifier}; Domain=${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}; HttpOnly; Expires=${date.addDays(120).toUTCString()}; Secure; SameSite=None; Path=/`;\n\n                  return {\n                    statusCode: 200,\n                    isBase64Encoded: false,\n                    multiValueHeaders: {\n                      'Set-Cookie': [cookieValue]\n                    },\n                    headers: cookieEnabledHeaders,\n                    body: JSON.stringify({ 'location': url })\n                  }\n                }\n                else {\n                  // redirect url === null\n                  return response(505, 'Service error, please contact the help desk.')\n                }\n              }\n              else {\n                // statusCode 200, but not 'OK' message\n                return response(501, 'The login service is not currently available. Contact the help desk.');\n              }\n            default:\n              // step 3 would not get 200, but 202 when the otp was sent.\n              return response(505, 'The login service is not currently available. Contact the help desk.');\n          }\n        case 202:\n          // test proposal\n          switch (step) {\n            case 1:\n              // User did not pass the passwordless verification. Push the user to the password page and request they enter their password.\n              return response(202, 'Your identity requires password login.')\n            case 2:\n              // User did not pass the passwordless verification. Push the user to the OTP Challenge Page\n              return {\n                statusCode: 202,\n                isBase64Encoded: false,\n                headers: cookieEnabledHeaders,\n                body: JSON.stringify(userAttributes)\n              }\n            case 3:\n              // The OTP was resent. Push the user back to the OTP Challenge Page: Display 'message'\n              return response(202, amfaResponseJSON.message)\n            case 4:\n              // The OTP entered was not correct. Push the user back to the OTP Challenge Page:\n              // transform the statusCode to 403, as all 202 in frontend means redirect to another page.\n              return response(403, 'The identity code you entered was not correct. Please try again.')\n            default:\n              // no such case\n              break;\n          }\n          break;\n        case 203:\n          // Country blocked or threat actor location detected.\n          // Push the user back to the initial login page with this error:\n          //    \"Your location is not permitted. Contact the help desk.\"\n          return response(203, 'Your location is not permitted. Contact the help desk.');\n        case 401:\n          // The user took too long or entered the otp wrong too many times.\n          // Send the user back to the login page with this error:\n          //    \"You took too long or entered your otp wrong too many times. Try your login again.\"\n          return response(401, 'You took too long or entered your otp wrong too many times. Try your login again.');\n        default:\n          // Anything else: Default - Push the user back to the initial login page with the error:\n          //     \"We ran into an issue. Please contact the help desk.\"\n          return response(502, 'We ran into an issue. Please contact the help desk.');\n      }\n    }\n\n    return response(503, 'amfa response error');\n  }\n  catch (error) {\n    console.error('Error in step ' + step + ':', error);\n    return response(504, error.message ? error.message : 'Unknown error in amfa steps');\n  }\n}\n\n  // Once the adaptive mfa api is executed, there are a number of possible return codes.\n  // Below are those return codes along with the behavior that should be performed as a result.\n  // code: 200 message: 0K   (IMPORTANT: Pull the identifier from the response and save it as a SECURE (https only/domain specific) long life cookie 120 days. cookie_name: hash(u+wr+salt).\n  //                    Allow the user to login. Enable all SSO Tokens and put the user in session.)\n  //                    Reading and writing cookies: https://stackoverflow.com/questions/3393854/get-and-set-a-single-cookie-with-node-js-http-server\n  // code: 200 message: {anything other than OK}\n  //                    In this case the ASM Admin has set the policy in maintenace or turned on auto learning,\n  //                    which for passwordless we don't want to allow.\n  //                    DO NOT Log the user in. Instead put them back to the login page with\n  //                    error: \"The login service is not currently available. Contact the help desk.\"\n  // code: 202          User did not pass the passwordless verification. Push the user to the password page and request they enter their password.\n  // code: 203          Contry blocked or threat actor location detected. Push the user back to the initial login page with this error: \"Your location is not permitted. Contact the help desk.\"\n  // code: Anything else: Default - Push the user back to the initial login page with the error: \"We ran into an issue. Please contact the help desk.\"\n  //\n", "// import axios from 'axios';\n\nexport const fetchConfigData = async () => {\n\n\t// const getTenantDataResponse = async () => {\n\t// \treturn await fetch(process.env.TENANT_CONFIG_URL);\n\t// \t// return axios.get(process.env.TENANT_CONFIG_URL);\n\t// }\n\n\t// const getConfigResponse = async () => {\n\t// \treturn await fetch(process.env.AMFA_CONFIG_URL);\n\t// \t// return await axios.get(process.env.AMFA_CONFIG_URL);\n\t// }\n\n\tconst [tenantDataRes, configDataRes] = await Promise.allSettled([fetch(process.env.TENANT_CONFIG_URL), fetch(process.env.AMFA_CONFIG_URL)]);\n\n\tconsole.log('tenantDataRes:', tenantDataRes);\n\tconsole.log('configDataRes:', configDataRes);\n\n\tif (tenantDataRes.status === 'rejected' || configDataRes.status === 'rejected') {\n\t\tconsole.log('Error getting amfa config file:', configDataRes.reason);\n\t\tconsole.log('Error getting tenant data:', tenantDataRes.reason);\n\n\t\tthrow new Error('Error getting config file');\n\t}\n\n\tif (tenantDataRes.value.status !== 200 || configDataRes.value.status !== 200) {\n\t\tconsole.log('Error getting amfa config file:', configDataRes.value);\n\t\tconsole.log('Error getting tenant data:', tenantDataRes.value);\n\n\t\tthrow new Error('Error getting config file');\n\t}\n\n\tconst tenantData = await tenantDataRes.value.json();\n\tconst configData = await configDataRes.value.json();\n\n\tconsole.log('tenantData:', tenantData);\n\tconsole.log('configData:', configData);\n\n\treturn [tenantData, configData];\n\n}", "import {\n\tDynamoDBClient,\n\tGetItemCommand,\n} from '@aws-sdk/client-dynamodb';\n\nexport const fetchCode = async (username, apti) => {\n\n\tconst dynamodb = new DynamoDBClient({region: process.env.AWS_REGION});\n\n    const params = {\n      TableName: process.env.AUTHCODE_TABLE,\n      Key: {\n        username: {S: username},\n\t\tapti: {S: apti}\n      },\n    };\n\tconst getItemCommand = new GetItemCommand(params);\n\tconst results = await dynamodb.send(getItemCommand);\n\tconsole.log('get authcode result:', results);\n\n\tconst state = results.Item.state.S;\n\tconst authCode = results.Item.authCode.S;\n\tconst redirectUri = results.Item.redirectUri.S;\n\n\treturn `${redirectUri}/?code=${authCode}&state=${state}`;\n\n}", "import * as crypto from 'crypto';\nimport {\n  RespondToAuthChallengeCommand,\n  InitiateAuthCommand,\n} from '@aws-sdk/client-cognito-identity-provider';\n\nimport {\n\tDynamoDBClient,\n\tPutItemCommand,\n} from '@aws-sdk/client-dynamodb';\n\nfunction makeId(length) {\n  var result = '';\n  var characters =\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nconst getUser = async (username, cognito) => {\n\n  const appclientId = process.env.APPCLIENT_ID;\n  const appclientSecret = process.env.APP_SECRET;\n\n  const secretHash = crypto\n    .createHmac('SHA256', appclientSecret)\n    .update(username + appclientId)\n    .digest('base64');\n\n  const initiateAuthParam = {\n    AuthFlow: 'CUSTOM_AUTH',\n    ClientId: appclientId,\n    AuthParameters: {\n      USERNAME: username,\n      SECRET_HASH: secretHash,\n    },\n  };\n\n  console.log ('initiateAuthParam:', initiateAuthParam);\n\n  const initiateAuthCommand = new InitiateAuthCommand(initiateAuthParam);\n\n  const initiateAuthResult = await cognito.send(initiateAuthCommand);\n\n  if (initiateAuthResult.ChallengeName === 'CUSTOM_CHALLENGE') {\n\n    const input = {\n\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ClientId: appclientId,\n      ChallengeResponses: {\n        USERNAME: username,\n        SECRET_HASH: secretHash,\n        ANSWER: process.env.MAGIC_STRING,\n      },\n      Session: initiateAuthResult.Session,\n    };\n\n    const command = new RespondToAuthChallengeCommand(input);\n\n    const user = await cognito.send(command);\n    console.log('user:', user);\n    return user;\n  }\n\n  return null;\n\n}\n\nconst storeTokens = async (user, payload, authCode) => {\n  console.log('tokens write user:', user);\n  console.log('payload:', payload);\n  console.log('authCode:', authCode);\n\n  const tokenString =\n    '{\"id_token\":\"' +\n    user.AuthenticationResult['IdToken'] +\n    '\",' +\n    '\"access_token\":\"' +\n    user.AuthenticationResult['AccessToken'] +\n    '\",' +\n    '\"refresh_token\":\"' +\n    user.AuthenticationResult['RefreshToken'] +\n    '\",' +\n    '\"expires_in\":300,\"token_type\":\"Bearer\"}';\n\n  const params = {\n    Item: {\n      username: {\n        S: payload.email,\n      },\n      apti: {\n        S: payload.apti,\n      },\n      authCode: {\n        S: authCode,\n      },\n      state: {\n        S: payload.state,\n      },\n      redirectUri: {\n        S: payload.redirectUri,\n      },\n      tokenString: {\n        S: tokenString,\n      },\n      timestamp: {\n        N: `${payload.requestTimeEpoch}`,\n      },\n    },\n    ReturnConsumedCapacity: 'TOTAL',\n    TableName: process.env.AUTHCODE_TABLE,\n  };\n\n  const putItemCommand = new PutItemCommand(params);\n\n  const dynamodb = new DynamoDBClient({ region: process.env.AWS_REGION });\n  const results = await dynamodb.send(putItemCommand);\n  console.log('tokens write result:', results);\n\n}\n\nexport const passwordlessLogin = async (payload, cognito) => {\n\n  const user = await getUser(payload.email, cognito);\n\n  if (user.AuthenticationResult) {\n    const authCode = makeId(32);\n    await storeTokens(user, payload, authCode);\n\n    return `${payload.redirectUri}/?code=${authCode}&state=${payload.state}`;\n  }\n  return null;\n};\n"],
  "mappings": "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",
  "names": ["amfa_exports", "__export", "handler", "__toCommonJS", "import_client_cognito_identity_provider", "import_client_cognito_identity_provider", "import_node_crypto", "fetchConfigData", "tenantDataRes", "configDataRes", "tenantData", "configData", "import_client_dynamodb", "fetchCode", "username", "apti", "dynamodb", "params", "getItemCommand", "results", "state", "authCode", "crypto", "import_client_cognito_identity_provider", "import_client_dynamodb", "makeId", "length", "result", "characters", "charactersLength", "i", "getUser", "username", "cognito", "appclientId", "appclientSecret", "secretHash", "initiateAuthParam", "initiateAuthCommand", "initiateAuthResult", "input", "command", "user", "storeTokens", "payload", "authCode", "tokenString", "params", "putItemCommand", "results", "passwordlessLogin", "amfaSteps", "event", "headers", "cognito", "step", "response", "statusCode", "body", "cookieEnabledHeaders", "hash", "content", "tenantData", "amfaConfigs", "fetchConfigData", "salt", "asmurl", "listUsersParam", "listUsersRes", "users", "user", "userAttributes", "acc", "curr", "param", "userGroup", "ug", "l", "wr", "sfl", "u", "igd", "a", "uIp", "apti", "otpm", "p", "otpp", "nsf", "af1", "amfaCookieName", "c", "startIndex", "tType", "postURL", "o", "amfaResponse", "amfaResponseJSON", "url", "passwordlessLogin", "fetchCode", "days", "date", "error", "validateInputParams", "payload", "headers", "response", "statusCode", "body", "client", "getIPFromHeader", "fwdfor", "handler", "event", "requestId", "error", "ipAddress", "oneEvent", "amfaSteps", "err"]
}
