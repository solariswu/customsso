var we=Object.create;var U=Object.defineProperty;var Ie=Object.getOwnPropertyDescriptor;var Ce=Object.getOwnPropertyNames;var Se=Object.getPrototypeOf,ye=Object.prototype.hasOwnProperty;var Pe=(e,r)=>{for(var o in r)U(e,o,{get:r[o],enumerable:!0})},oe=(e,r,o,s)=>{if(r&&typeof r=="object"||typeof r=="function")for(let t of Ce(r))!ye.call(e,t)&&t!==o&&U(e,t,{get:()=>r[t],enumerable:!(s=Ie(r,t))||s.enumerable});return e};var ae=(e,r,o)=>(o=e!=null?we(Se(e)):{},oe(r||!e||!e.__esModule?U(o,"default",{value:e,enumerable:!0}):o,e)),Ae=e=>oe(U({},"__esModule",{value:!0}),e);var Ue={};Pe(Ue,{handler:()=>ve});module.exports=Ae(Ue);var G=require("@aws-sdk/client-cognito-identity-provider");var $=require("@aws-sdk/client-cognito-identity-provider"),pe=require("node:crypto");var D=require("@aws-sdk/client-dynamodb"),ie=async(e,r)=>{let o=new D.DynamoDBClient({region:process.env.AWS_REGION}),s={TableName:process.env.AUTHCODE_TABLE,Key:{username:{S:e},apti:{S:r}}},t=new D.GetItemCommand(s),a=await o.send(t);console.log("get authcode result:",a);let l=a.Item.state.S,u=a.Item.authCode.S;return`${a.Item.redirectUri.S}/?code=${u}&state=${l}`};var ne=ae(require("crypto"),1),_=require("@aws-sdk/client-cognito-identity-provider"),R=require("@aws-sdk/client-dynamodb");function Oe(e){for(var r="",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=o.length,t=0;t<e;t++)r+=o.charAt(Math.floor(Math.random()*s));return r}var Te=async(e,r)=>{let o=process.env.APPCLIENT_ID,s=process.env.APP_SECRET,t=ne.createHmac("SHA256",s).update(e+o).digest("base64"),a={AuthFlow:"CUSTOM_AUTH",ClientId:o,AuthParameters:{USERNAME:e,SECRET_HASH:t}};console.log("initiateAuthParam:",a);let l=new _.InitiateAuthCommand(a),u=await r.send(l);if(u.ChallengeName==="CUSTOM_CHALLENGE"){let c={ChallengeName:"CUSTOM_CHALLENGE",ClientId:o,ChallengeResponses:{USERNAME:e,SECRET_HASH:t,ANSWER:process.env.MAGIC_STRING},Session:u.Session},g=new _.RespondToAuthChallengeCommand(c),p=await r.send(g);return console.log("user:",p),p}return null},be=async(e,r,o)=>{console.log("tokens write user:",e),console.log("payload:",r),console.log("authCode:",o);let s='{"id_token":"'+e.AuthenticationResult.IdToken+'","access_token":"'+e.AuthenticationResult.AccessToken+'","refresh_token":"'+e.AuthenticationResult.RefreshToken+'","expires_in":300,"token_type":"Bearer"}',t={Item:{username:{S:r.email},apti:{S:r.apti},authCode:{S:o},state:{S:r.state},redirectUri:{S:r.redirectUri},tokenString:{S:s},timestamp:{N:`${r.requestTimeEpoch}`}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.AUTHCODE_TABLE},a=new R.PutItemCommand(t),u=await new R.DynamoDBClient({region:process.env.AWS_REGION}).send(a);console.log("tokens write result:",u)},ce=async(e,r)=>{let o=await Te(e.email,r);if(o.AuthenticationResult){let s=Oe(32);return await be(o,e,s),`${e.redirectUri}/?code=${s}&state=${e.state}`}return null};var le="apenc";var q=require("@aws-sdk/client-dynamodb"),ue=ae(require("crypto"),1),Ne=new q.DynamoDBClient({region:process.env.AWS_REGION}),F=async(e,r,o)=>{console.log("generate pwd reset id for user:",e),console.log("generate pwd reset id, apti:",r),console.log("generate pwd reset id, otpaddr:",o);let s=ue.randomUUID(),t=Date.now(),l={Item:{uuid:{S:s},username:{S:e},apti:{S:r},otpaddr:{S:o||""},timestamp:{N:`${t}`}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.PWDRESET_ID_TABLE},u=new q.PutItemCommand(l),c=await Ne.send(u);return console.log("pwd reset id write result:",c),s};var x=require("@aws-sdk/client-dynamodb"),T=async e=>{let r=new x.DynamoDBClient({region:process.env.AWS_REGION}),o={TableName:process.env.AMFACONFIG_TABLE,Key:{configtype:{S:e}}},s=new x.GetItemCommand(o),t=await r.send(s);if(console.log(`get ${e} result:`,t),t.Item===void 0)throw new Error(`No ${e} found`);let a=JSON.parse(t.Item.value.S);return console.log("result:",a),a};var de=require("@aws-sdk/client-cognito-identity-provider"),S=require("@aws-sdk/client-dynamodb"),me=async e=>{let r=new S.DynamoDBClient({region:process.env.AWS_REGION}),o={TableName:process.env.PWDRESET_ID_TABLE,Key:{uuid:{S:e.uuid}}};try{let s=new S.GetItemCommand(o),t=await r.send(s);console.log("get update profile uid result:",t);let a=t.Item.username.S,l=t.Item.apti.S,u=t.Item.otpaddr.S;return a===e.email&&l===e.apti&&u===e.newProfile}catch(s){console.log("error",s)}return!1},K=async(e,r,o,s,t)=>{let a=[];switch(r){case"ae":a.push({Name:"custom:alter-email",Value:o});break;case"v":a.push({Name:"custom:voice-number",Value:o});break;case"s":a.push({Name:"phone_number",Value:o}),a.push({Name:"phone_number_verified",Value:o&&o.length>0?"true":"false"});break;default:break}let l=new de.AdminUpdateUserAttributesCommand({Username:e,UserPoolId:process.env.USERPOOL_ID,UserAttributes:a});await t.send(l);let u=new S.DynamoDBClient({region:process.env.AWS_REGION}),c={TableName:process.env.PWDRESET_ID_TABLE,Key:{uuid:{S:s}}};try{await u.send(new S.DeleteItemCommand(c))}catch(g){console.log(`delete uuid in ddb table ${process.env.PWDRESET_ID_TABLE} error, uuid:`,s),console.log("dynamobdb delete item error: ",g)}};var V=async(e,r,o,s)=>{let t=(c,g,p)=>({isBase64Encoded:!1,statusCode:c,headers:{...r,requestId:p||""},body:JSON.stringify({message:g})}),a={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With","Access-Control-Allow-Origin":`https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,"Access-Control-Allow-Methods":"OPTIONS,GET,POST","Access-Control-Expose-Headers":"Set-Cookie","Access-Control-Allow-Credentials":"true"};function l(c){return(0,pe.createHash)("md5").update(c).digest("hex")}if((s==="updateProfile"||s==="removeProfile")&&!await me(e))return t(400,"Invalid UUID",e.requestId);try{let c=await T("amfaConfigs"),g=c.salt,p=c.asmurl,j={UserPoolId:process.env.USERPOOL_ID,Filter:'email = "'+e.email+'"'},b=await o.send(new $.ListUsersCommand(j));if(!b||!b.Users||b.Users.length===0)return console.log("Did not find valid user for email:",e.email),t(500,"Did not find valid user for this email",e.requestId);let N=b.Users.filter(i=>i.UserStatus==="CONFIRMED");if(N.length===0)return console.log("Did not find valid user for email:",e.email),t(500,"Did not find valid user for this email, user status is not CONFIRMED",e.requestId);console.log("UserAttributes:",N[0].Attributes);let d=N[0].Attributes.reduce((i,n)=>(i[n.Name]=n.Value,i)),fe={UserPoolId:process.env.USERPOOL_ID,Username:N[0].Username},w=await o.send(new $.AdminListGroupsForUserCommand(fe));console.log("userGroup:",w);let f="default",Q=1e4,m=await T("amfaPolicies");for(let i=0;i<w.Groups.length;i++)w.Groups[i].GroupName=w.Groups[i].GroupName.toLowerCase(),m[w.Groups[i].GroupName]&&m[w.Groups[i].GroupName].rank<Q&&(f=w.Groups[i].GroupName,Q=m[w.Groups[i].GroupName].rank);switch(m[f]||(f="default"),console.log("ug:",f),e.otptype){case"e":e.otpaddr=e.email;break;case"ae":e.otpaddr=d["custom:alter-email"];break;case"s":e.otpaddr=d.phone_number;break;case"v":e.otpaddr=d["custom:voice-number"]?d["custom:voice-number"]:d.phone_number;break;default:break}if(e.otpaddr=e.otpaddr?.toLowerCase(),s==="updateProfileSendOTP"&&e.profile!==""&&e.otpaddr!==e.profile)return t(400,"Your entry was not valid, please try again.",e.requestId);if((s==="updateProfileSendOTP"||s==="updateProfile")&&(e.otpaddr=e.newProfile?.toLowerCase()),s==="removeProfile"){let i=!1;switch(e.otptype){case"ae":i=d["custom:alter-email"]===e.profile;break;case"s":i=e.profile===d.phone_number;break;case"v":i=e.profile===d["custom:voice-number"];break;default:break}return i?(await K(e.email,e.otptype,"",e.uuid,o),t(200,"OK",e.requestId)):t(400,"Your entry was not valid, please try again.",e.requestId)}if(s==="getOtpOptions"){let i=d.phone_number?d.phone_number.replace(/(\d{3})(\d{5})(\d{1})/,"$1xxx$3"):null,n=d["custom:alter-email"]?d["custom:alter-email"]:null;n&&n.indexOf("@")>0?n=`${n[0]}xxx@${n[n.lastIndexOf("@")+1]}xx.${n.substring(n.lastIndexOf(".")+1)}`:n=null;let W=d["custom:voice-number"]?d["custom:voice-number"].replace(/(\d{3})(\d{5})(\d{1})/,"$1xxx$3"):null,v=JSON.stringify({otpOptions:m[f].permissions,email:d.email,phoneNumber:i,aemail:n,vPhoneNumber:W});return console.log("body:",v),{statusCode:200,isBase64Encoded:!1,headers:r,body:v}}let I=m[f].policy_name?encodeURI(m[f].policy_name):"";if(s.startsWith("pwdreset")&&(I=m["password-reset"].policy_name?encodeURI(m["password-reset"].policy_name):""),(s.startsWith("selfservice")||s.startsWith("updateProfile"))&&(I=m["self-service"].policy_name?encodeURI(m["self-service"].policy_name):""),I==="")return console.log("Did not find a valid ASM Policy for the user group:",f),t(500,`Did not find a valid ASM Policy for the user group:${f})`,e.requestId);let L=e.origin,M=6,C=e.email,Z=e.rememberDevice==="true"?0:1,ee=encodeURI(e.authParam),A=e.uIP?e.uIP:"00000000000",E=e.apti,y="e",P=C,k=1,he=3,se=C+"passwordless_check"+A,H=l(`${C}${L}${g}`),te="";if(e.cookies&&e.cookies.trim().length>0){let i=e.cookies.trim().indexOf(H)+H.length+1;te=e.cookies.trim().substring(i).split(";")[0]}let h=p+"/extAuthenticate.kv?l="+I+"&u="+C+"&uIp="+A+"&apti="+E+"&c="+te+"&wr="+L+"&igd="+Z+"&otpm="+y+"&p="+P+"&otpp="+k+"&af1="+se+"&a="+ee,re={username:"Initial passwordless login verification",password:"Password login verification",sendotp:"Request OTP",verifyotp:"OTP verify",pwdreset2:"Password reset 1st verify",pwdresetverify2:"OTP verify",pwdreset3:"Password reset 2nd verify",pwdresetverify3:"OTP verify",selfservice2:"Self service 1st verify",selfserviceverify2:"OTP verify",selfservice3:"Self service 2nd verify",selfserviceverify3:"OTP verify",updateProfileSendOTP:"Update profile verify",updateProfile:"OTP verify"},O=encodeURI(re[s]?re[s]:"Unknown");switch(s){case"username":h=h+"&sfl="+M+"&nsf="+he+"&tType="+O;break;case"password":h=h+"&tType="+O;break;case"sendotp":y=e.otptype,P=e.otpaddr,h=p+"/extResendOtp.kv?l="+I+"&u="+C+"&apti="+E+"&uIp="+A+"&otpm="+y+"&p="+P+"&tType="+O;break;case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":case"updateProfile":let i=e.otpcode;h=p+"/extVerifyOtp.kv?l="+I+"&u="+C+"&uIp="+A+"&apti="+E+"&wr="+L+"&igd="+Z+"&otpm="+y+"&p="+P+"&otpp="+k+"&tType="+O+"&af1="+se+"&a="+ee+"&o="+i;break;case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":case"updateProfileSendOTP":y=e.otptype,P=e.otpaddr,M=7,k=0,h=p+"/extAuthenticate.kv?l="+I+"&sfl="+M+"&u="+C+"&apti="+E+"&uIp="+A+"&otpm="+y+"&p="+P+"&tType="+O+"&otpp="+k;break;default:break}console.log("now posting to : ",h);let B=await fetch(h,{method:"POST"});if(B&&B.status){let i=await B.json();switch(console.log("amfaResponseJSON:",i),i.code){case 200:switch(s){case"updateProfile":return i.message==="OK"?(await K(e.email,e.otptype,e.otpaddr,e.uuid,o),t(200,"OK",e.requestId)):t(506,"The login service is not currently available. Contact the help desk.",e.requestId);case"username":case"password":case"verifyotp":if(i.message==="OK"){let n=s==="username"?await ce(e,o):await ie(e.email,e.apti);if(console.log("url:",n),n){Date.prototype.addDays=function(ge){var J=new Date(this.valueOf());return J.setDate(J.getDate()+ge),J};var u=new Date;let W=`${H}=${i.identifier}; Domain=${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}; HttpOnly; Expires=${u.addDays(120).toUTCString()}; Secure; SameSite=Strict; Path=/`,v=`${le}=${i.identifier.substr(-16,16)}; Domain=${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}; Expires=${u.addDays(120).toUTCString()}; Secure; SameSite=Strict; Path=/`;return{statusCode:200,isBase64Encoded:!1,multiValueHeaders:{"Set-Cookie":[W,v]},headers:a,body:JSON.stringify({location:n})}}else return t(505,"Service error, please contact the help desk.",e.requestId)}else return t(501,"The login service is not currently available. Contact the help desk.",e.requestId);case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":if(i.message==="OK"){let n=await F(e.email,e.apti);return{isBase64Encoded:!1,statusCode:200,headers:{...r,requestId:e.requestId},body:JSON.stringify({message:"OK",uuid:n})}}else return t(501,"The login service is not currently available. Contact the help desk.",e.requestId);default:return t(505,"The login service is not currently available. Contact the help desk.",e.requestId)}case 202:switch(s){case"username":return t(202,"Your identity requires password login.",e.requestId);case"password":return{statusCode:202,isBase64Encoded:!1,headers:{...a,requestId:e.requestId},body:JSON.stringify({...d,otpOptions:m[f].permissions})};case"sendotp":case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":return t(202,i.message,e.requestId);case"updateProfileSendOTP":let n=await F(e.email,e.apti,e.otpaddr);return{isBase64Encoded:!1,statusCode:202,headers:{...r,requestId:e.requestId},body:JSON.stringify({message:i.message,uuid:n})};case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":case"updateProfile":return t(403,"The identity code you entered was not correct. Please try again.",e.requestId);default:break}break;case 203:return t(203,"Your location is not permitted. Contact the help desk.",e.requestId);case 401:return t(401,"You took too long or entered your otp wrong too many times. Try your login again.",e.requestId);default:return t(502,"We ran into an issue. Please contact the help desk.",e.requestId)}}return t(503,"amfa response error",e.requestId)}catch(c){return console.error('Error in step "'+s+'" :',c),c.message.indexOf("fetch failed")===-1?t(504,c.message?c.message:"Unknown error in amfa steps",e.requestId):t(504,"MFA Service is not responding. Contact the help desk.",e.requestId)}};var Ee=e=>{switch(e.phase){case"username":return e&&e.email&&e.apti&&e.authParam;case"password":return e&&e.email&&e.password&&e.apti&&e.authParam;case"sendotp":case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":case"updateProfileSendOTP":return e&&e.email&&e.otptype&&e.apti&&e.authParam;case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":return e&&e.email&&e.otpcode&&e.otptype&&e.apti&&e.authParam;case"updateProfile":return e&&e.email&&e.otpcode&&e.otptype&&e.apti&&e.authParam&&e.uuid;case"getOtpOptions":return e&&e.email&&e.apti&&e.authParam;case"removeProfile":return e&&e.email&&e.apti&&e.authParam&&e.profile;default:break}return console.log("Invalid payload",e),!1},z={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With","Access-Control-Allow-Origin":`https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,"Access-Control-Allow-Methods":"OPTIONS,GET,POST","Access-Control-Expose-Headers":"Set-Cookie","Access-Control-Allow-Credentials":"true"},Y=(e=200,r,o)=>({statusCode:e,headers:{...z,requestId:o},body:r}),X=new G.CognitoIdentityProviderClient({region:process.env.AWS_REGION}),ke=e=>e.split(",")[0],ve=async e=>{console.log("Received event:",JSON.stringify(e,null,2));let r=Math.random().toString(36).substring(2,16)+Math.random().toString(36).substring(2,16);console.log("amfa requestid: ",r);let o="";try{let s=JSON.parse(e.body);if(console.log("payload",s),s&&Ee(s)){let t=ke(e.headers["X-Forwarded-For"].trim()),a={};switch(a.uIP=t,a.email=s.email?.trim()?.toLowerCase(),a.apti=s.apti,a.rememberDevice=s.rememberDevice,a.authParam=s.authParam,a.origin=`${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,a.otptype=s.otptype?.toLowerCase(),a.otpcode=s.otpcode,a.redirectUri=s.redirectUri,a.state=s.state,a.requestTimeEpoch=e.requestContext.requestTimeEpoch,a.uuid=s.uuid,a.newProfile=s.newProfile?s.newProfile.toLowerCase():"",a.profile=s.profile?s.profile.toLowerCase():"",a.requestId=r,a.cookies=e.headers.Cookie,console.log("oneEvent",a),s.phase){case"username":let l=await X.send(new G.ListUsersCommand({UserPoolId:process.env.USERPOOL_ID,Filter:`email = "${a.email}"`}));return console.log(l),(await T("amfaConfigs")).enable_passwordless&&l&&l.Users&&l.Users.length>0?await V(a,z,X,s.phase):Y(202,"Your identity requires password login.",r);default:return await V(a,z,X,s.phase)}}else o="incoming params error."}catch(s){return console.log("error details:",s),Y(s.statusCode?s.statusCode:500,JSON.stringify({message:"input param parse error"}),r)}return Y(500,JSON.stringify({message:o}),r)};0&&(module.exports={handler});
//# sourceMappingURL=amfa.js.map
