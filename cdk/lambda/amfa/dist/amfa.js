var de=Object.create;var k=Object.defineProperty;var fe=Object.getOwnPropertyDescriptor;var ge=Object.getOwnPropertyNames;var he=Object.getPrototypeOf,we=Object.prototype.hasOwnProperty;var ve=(e,t)=>{for(var o in t)k(e,o,{get:t[o],enumerable:!0})},Q=(e,t,o,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of ge(t))!we.call(e,r)&&r!==o&&k(e,r,{get:()=>t[r],enumerable:!(s=fe(t,r))||s.enumerable});return e};var Z=(e,t,o)=>(o=e!=null?de(he(e)):{},Q(t||!e||!e.__esModule?k(o,"default",{value:e,enumerable:!0}):o,e)),Ce=e=>Q(k({},"__esModule",{value:!0}),e);var Ee={};ve(Ee,{handler:()=>Te});module.exports=Ce(Ee);var G=require("@aws-sdk/client-cognito-identity-provider");var _=require("@aws-sdk/client-cognito-identity-provider"),ae=require("node:crypto");var P=require("@aws-sdk/client-dynamodb"),ee=async(e,t)=>{let o=new P.DynamoDBClient({region:process.env.AWS_REGION}),s={TableName:process.env.AUTHCODE_TABLE,Key:{username:{S:e},apti:{S:t}}},r=new P.GetItemCommand(s),n=await o.send(r);console.log("get authcode result:",n);let c=n.Item.state.S,p=n.Item.authCode.S;return`${n.Item.redirectUri.S}/?code=${p}&state=${c}`};var se=Z(require("crypto"),1),D=require("@aws-sdk/client-cognito-identity-provider"),R=require("@aws-sdk/client-dynamodb");function ye(e){for(var t="",o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",s=o.length,r=0;r<e;r++)t+=o.charAt(Math.floor(Math.random()*s));return t}var Ae=async(e,t)=>{let o=process.env.APPCLIENT_ID,s=process.env.APP_SECRET,r=se.createHmac("SHA256",s).update(e+o).digest("base64"),n={AuthFlow:"CUSTOM_AUTH",ClientId:o,AuthParameters:{USERNAME:e,SECRET_HASH:r}};console.log("initiateAuthParam:",n);let c=new D.InitiateAuthCommand(n),p=await t.send(c);if(p.ChallengeName==="CUSTOM_CHALLENGE"){let i={ChallengeName:"CUSTOM_CHALLENGE",ClientId:o,ChallengeResponses:{USERNAME:e,SECRET_HASH:r,ANSWER:process.env.MAGIC_STRING},Session:p.Session},v=new D.RespondToAuthChallengeCommand(i),g=await t.send(v);return console.log("user:",g),g}return null},Se=async(e,t,o)=>{console.log("tokens write user:",e),console.log("payload:",t),console.log("authCode:",o);let s='{"id_token":"'+e.AuthenticationResult.IdToken+'","access_token":"'+e.AuthenticationResult.AccessToken+'","refresh_token":"'+e.AuthenticationResult.RefreshToken+'","expires_in":300,"token_type":"Bearer"}',r={Item:{username:{S:t.email},apti:{S:t.apti},authCode:{S:o},state:{S:t.state},redirectUri:{S:t.redirectUri},tokenString:{S:s},timestamp:{N:`${t.requestTimeEpoch}`}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.AUTHCODE_TABLE},n=new R.PutItemCommand(r),p=await new R.DynamoDBClient({region:process.env.AWS_REGION}).send(n);console.log("tokens write result:",p)},te=async(e,t)=>{let o=await Ae(e.email,t);if(o.AuthenticationResult){let s=ye(32);return await Se(o,e,s),`${e.redirectUri}/?code=${s}&state=${e.state}`}return null};var re="apenc";var U=require("@aws-sdk/client-dynamodb"),oe=Z(require("crypto"),1),Ie=new U.DynamoDBClient({region:process.env.AWS_REGION}),ne=async(e,t)=>{console.log("generate pwd reset id for user:",e),console.log("generate pwd reset id, apti :",t);let o=oe.randomUUID(),s=Date.now(),r={Item:{uuid:{S:o},username:{S:e},apti:{S:t},timestamp:{N:`${s}`}},ReturnConsumedCapacity:"TOTAL",TableName:process.env.PWDRESET_ID_TABLE},n=new U.PutItemCommand(r),c=await Ie.send(n);return console.log("pwd reset id write result:",c),o};var b=require("@aws-sdk/client-dynamodb"),I=async e=>{let t=new b.DynamoDBClient({region:process.env.AWS_REGION}),o={TableName:process.env.AMFACONFIG_TABLE,Key:{configtype:{S:e}}},s=new b.GetItemCommand(o),r=await t.send(s);if(console.log(`get ${e} result:`,r),r.Item===void 0)throw new Error(`No ${e} found`);let n=JSON.parse(r.Item.value.S);return console.log("result:",n),n};var F=async(e,t,o,s)=>{let r=(i,v)=>({isBase64Encoded:!1,statusCode:i,headers:t,body:JSON.stringify({message:v})}),n={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With","Access-Control-Allow-Origin":`https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,"Access-Control-Allow-Methods":"OPTIONS,GET,POST","Access-Control-Expose-Headers":"Set-Cookie","Access-Control-Allow-Credentials":"true"};function c(i){return(0,ae.createHash)("md5").update(i).digest("hex")}try{let i=await I("amfaConfigs"),v=i.salt,g=i.asmurl,ie={UserPoolId:process.env.USERPOOL_ID,Filter:'email = "'+e.email+'"'},O=await o.send(new _.ListUsersCommand(ie));if(!O||!O.Users||O.Users.length===0)return console.log("Did not find valid user for email:",e.email),r(500,"Did not find valid user for this email");let N=O.Users.filter(a=>a.UserStatus==="CONFIRMED");if(N.length===0)return console.log("Did not find valid user for email:",e.email),r(500,"Did not find valid user for this email, user status is not CONFIRMED");console.log("UserAttributes:",N[0].Attributes);let A=N[0].Attributes.reduce((a,f)=>(a[f.Name]=f.Value,a)),ce={UserPoolId:process.env.USERPOOL_ID,Username:N[0].Username},d=await o.send(new _.AdminListGroupsForUserCommand(ce));console.log("userGroup:",d);let m="default",K=1e4,l=await I("amfaPolicies");for(let a=0;a<d.Groups.length;a++)d.Groups[a].GroupName=d.Groups[a].GroupName.toLowerCase(),l[d.Groups[a].GroupName]&&l[d.Groups[a].GroupName].rank<K&&(m=d.Groups[a].GroupName,K=l[d.Groups[a].GroupName].rank);if(l[m]||(m="default"),console.log("ug:",m),s==="getOtpOptions"){let a=JSON.stringify({otpOptions:l[m].permissions,email:A.email,phoneNumber:A.phone_number,aemail:A["custom:alter-email"],vPhoneNumber:A["custom:voice-number"]});return console.log("body:",a),{statusCode:200,isBase64Encoded:!1,headers:t,body:a}}let h=l[m].policy_name?encodeURI(l[m].policy_name):"";if(s.startsWith("pwdreset")&&(h=l["password-reset"].policy_name?encodeURI(l["password-reset"].policy_name):""),s.startsWith("selfservice")&&(h=l["self-service"].policy_name?encodeURI(l["self-service"].policy_name):""),h==="")return console.log("Did not find a valid ASM Policy for the user group:",m),r(500,`Did not find a valid ASM Policy for the user group:${m})`);let $=e.origin,M=6,w=e.email,V=e.rememberDevice==="true"?0:1,X=encodeURI(e.authParam),x=e.uIP?e.uIP:"00000000000",T=e.apti,C="e",y=w,E=1,le=3,Y=w+"passwordless_check"+x,L=c(`${w}${$}${v}`),z="";if(e.cookies&&e.cookies.trim().length>0){let a=e.cookies.trim().indexOf(L)+L.length+1;z=e.cookies.trim().substring(a).split(";")[0]}let u=g+"/extAuthenticate.kv?l="+h+"&u="+w+"&uIp="+x+"&apti="+T+"&c="+z+"&wr="+$+"&igd="+V+"&otpm="+C+"&p="+y+"&otpp="+E+"&af1="+Y+"&a="+X,j={username:"Initial passwordless login verification",password:"Password login verification",sendotp:"Request OTP",verifyotp:"OTP verify",pwdreset2:"Password reset 1st verify",pwdresetverify2:"OTP verify",pwdreset3:"Password reset 2nd verify",pwdresetverify3:"OTP verify",selfservice2:"Self service 1st verify",selfserviceverify2:"OTP verify",selfservice3:"Self service 2nd verify",selfserviceverify3:"OTP verify"},S=encodeURI(j[s]?j[s]:"Unknown");switch(s){case"username":u=u+"&sfl="+M+"&nsf="+le+"&tType="+S;break;case"password":u=u+"&tType="+S;break;case"sendotp":C=e.otptype,y=e.otpaddr,u=g+"/extResendOtp.kv?l="+h+"&u="+w+"&apti="+T+"&otpm="+C+"&p="+y+"&tType="+S;break;case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":let a=e.otpcode;u=g+"/extVerifyOtp.kv?l="+h+"&u="+w+"&uIp="+x+"&apti="+T+"&wr="+$+"&igd="+V+"&otpm="+C+"&p="+y+"&otpp="+E+"&tType="+S+"&af1="+Y+"&a="+X+"&o="+a;break;case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":C=e.otptype,y=e.otpaddr,M=7,E=0,u=g+"/extAuthenticate.kv?l="+h+"&sfl="+M+"&u="+w+"&apti="+T+"&otpm="+C+"&p="+y+"&tType="+S+"&otpp="+E;break;default:break}console.log("now posting to : ",u);let H=await fetch(u,{method:"POST"});if(H&&H.status){let a=await H.json();switch(console.log("amfaResponseJSON:",a),a.code){case 200:switch(s){case"username":case"password":case"verifyotp":if(a.message==="OK"){let f=s==="username"?await te(e,o):await ee(e.email,e.apti);if(console.log("url:",f),f){Date.prototype.addDays=function(ue){var B=new Date(this.valueOf());return B.setDate(B.getDate()+ue),B};var p=new Date;let pe=`${L}=${a.identifier}; Domain=${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}; HttpOnly; Expires=${p.addDays(120).toUTCString()}; Secure; SameSite=Strict; Path=/`,me=`${re}=${a.identifier.substr(-16,16)}; Domain=${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}; Expires=${p.addDays(120).toUTCString()}; Secure; SameSite=Strict; Path=/`;return{statusCode:200,isBase64Encoded:!1,multiValueHeaders:{"Set-Cookie":[pe,me]},headers:n,body:JSON.stringify({location:f})}}else return r(505,"Service error, please contact the help desk.")}else return r(501,"The login service is not currently available. Contact the help desk.");case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":if(a.message==="OK"){let f=await ne(e.email,e.apti);return{isBase64Encoded:!1,statusCode:200,headers:t,body:JSON.stringify({message:"OK",uuid:f})}}else return r(501,"The login service is not currently available. Contact the help desk.");default:return r(505,"The login service is not currently available. Contact the help desk.")}case 202:switch(s){case"username":return r(202,"Your identity requires password login.");case"password":return{statusCode:202,isBase64Encoded:!1,headers:n,body:JSON.stringify({...A,otpOptions:l[m].permissions})};case"sendotp":case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":return r(202,a.message);case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":return r(403,"The identity code you entered was not correct. Please try again.");default:break}break;case 203:return r(203,"Your location is not permitted. Contact the help desk.");case 401:return r(401,"You took too long or entered your otp wrong too many times. Try your login again.");default:return r(502,"We ran into an issue. Please contact the help desk.")}}return r(503,"amfa response error")}catch(i){return console.error('Error in step "'+s+'" :',i),i.message.indexOf("fetch failed")===-1?r(504,i.message?i.message:"Unknown error in amfa steps"):r(504,"MFA Service is not responding. Contact the help desk.")}};var Oe=e=>{switch(e.phase){case"username":return e&&e.email&&e.apti&&e.authParam;case"password":return e&&e.email&&e.password&&e.apti&&e.authParam;case"sendotp":case"pwdreset2":case"pwdreset3":case"selfservice2":case"selfservice3":return e&&e.otpaddr&&e.otptype&&e.apti&&e.authParam;case"verifyotp":case"pwdresetverify2":case"pwdresetverify3":case"selfserviceverify2":case"selfserviceverify3":return e&&e.email&&e.otpcode&&e.otptype&&e.apti&&e.authParam;case"getOtpOptions":return e&&e.email&&e.apti&&e.authParam;default:break}return console.log("Invalid payload",e),!1},q={"Access-Control-Allow-Headers":"Content-Type,Authorization,X-Api-Key,Set-Cookie,Cookie,X-Requested-With","Access-Control-Allow-Origin":`https://${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,"Access-Control-Allow-Methods":"OPTIONS,GET,POST","Access-Control-Expose-Headers":"Set-Cookie","Access-Control-Allow-Credentials":"true"},J=(e=200,t)=>({statusCode:e,headers:q,body:t}),W=new G.CognitoIdentityProviderClient({region:process.env.AWS_REGION}),Ne=e=>e.split(",")[0],Te=async e=>{console.log("Received event:",JSON.stringify(e,null,2));let t=Math.random().toString(36).substring(2,16)+Math.random().toString(36).substring(2,16),o="";try{let s=JSON.parse(e.body);if(console.log("payload",s),s&&Oe(s)){let r=Ne(e.headers["X-Forwarded-For"].trim()),n={};switch(n.uIP=r,n.email=s.email,n.apti=s.apti,n.rememberDevice=s.rememberDevice,n.authParam=s.authParam,n.origin=`${process.env.TENANT_ID}.${process.env.DOMAIN_NAME}`,n.otptype=s.otptype,n.otpcode=s.otpcode,n.otpaddr=s.otpaddr,n.redirectUri=s.redirectUri,n.state=s.state,n.requestTimeEpoch=e.requestContext.requestTimeEpoch,n.cookies=e.headers.Cookie,console.log("oneEvent",n),s.phase){case"username":let c=await W.send(new G.ListUsersCommand({UserPoolId:process.env.USERPOOL_ID,Filter:`email = "${s.email}"`}));return console.log(c),(await I("amfaConfigs")).enable_passwordless&&c&&c.Users&&c.Users.length>0?await F(n,q,W,s.phase):J(202,"Your identity requires password login.");case"password":case"sendotp":case"verifyotp":case"getOtpOptions":case"pwdreset2":case"pwdresetverify2":case"pwdreset3":case"pwdresetverify3":case"selfservice2":case"selfserviceverify2":case"selfservice3":case"selfserviceverify3":return await F(n,q,W,s.phase);default:break}}else o="incoming params error."}catch(s){return console.log(s),J(s.statusCode?s.statusCode:500,JSON.stringify({message:"input param parse error"}))}return J(500,JSON.stringify({message:o}))};0&&(module.exports={handler});
//# sourceMappingURL=amfa.js.map
