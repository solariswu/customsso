{
  "version": 3,
  "sources": ["../get.mjs", "../getKms.mjs"],
  "sourcesContent": ["import { GetItemCommand } from '@aws-sdk/client-dynamodb';\nimport { getSecret } from './getKms.mjs';\nimport * as crypto from 'crypto';\n\nconst aesDecrypt = ({ toDecrypt, aesKey }) => {\n    const decipher = crypto.createDecipheriv('aes-128-ecb', aesKey, '');\n    let decrypted = decipher.update(toDecrypt, 'base64', 'utf8');\n    return decrypted + decipher.final('utf8');\n};\n\nconst readFromDB = async (email, provider_id, dynamodb) => {\n    //fetch tenant Info\n    const params = {\n        TableName: process.env.TOTPTOKEN_TABLE,\n        Key: {\n            id: { S: email.trim() + '#' + provider_id?.trim() },\n        },\n    };\n\n    const result = await dynamodb.send(new GetItemCommand(params));\n\n    console.log('get totp token result', result);\n\n    const item = result.Item;\n\n    if (item && item.token) {\n\n        return {\n            token: item.token.S,\n            device_name: item.device_name.S,\n            email,\n        };\n    }\n\n    return null;\n}\n\n\nexport const getSecretKey = async (payload, dynamodb) => {\n    const { email, pid} = payload;\n\n    const readResult = await readFromDB(email, pid, dynamodb);\n\n    console.log('totpTokenDB readResult', readResult);\n\n    if (readResult) {\n        const result = readResult.token;\n\n        const secret = await getSecret();\n        const totp_secret = secret?.totpSecret;\n        const totp_salt = secret?.totpSalt;\n\n        const key_and_salt = `${totp_secret}${totp_salt}`;\n        const key_salt_and_email = key_and_salt + email.substring(0, email.length / 2);\n        const encoded_key = Buffer.from(key_salt_and_email, 'utf8').toString('base64');\n        const final_encrypt_key = encoded_key.substring(0, 16);\n\n        return aesDecrypt({ toDecrypt: result, aesKey: final_encrypt_key });\n\n    }\n\n    return null;\n\n}\n\nexport const getTotp = async (email, provider_id, dynamodb) => {\n\tconst res = await readFromDB(email, provider_id, dynamodb);\n\treturn res?.device_name;\n}\n\nexport const getResData = async (payload, dynamodb, getType) => {\n\n    switch (getType) {\n        case 'n':\n            //device name only\n            return await getTotp(payload.email, payload.pid, dynamodb);\n        case 'c':\n            return await readFromDB(payload.email, payload.pid, dynamodb)\n            // return await getSecretKey(payload, dynamodb);\n        default:\n            break;\n    }\n\n    return null;\n\n}", "import {\n\tSecretsManagerClient,\n\tGetSecretValueCommand,\n} from \"@aws-sdk/client-secrets-manager\";\n\nconst client = new SecretsManagerClient({\n\tregion: process.env.AWS_REGION,\n});\n\nexport const getSecret = async () => {\n\tconst response = await client.send(\n\t\tnew GetSecretValueCommand({\n\t\t\tSecretId: `amfa/${process.env.TENANT_ID}/secret`,\n\t\t\tVersionStage: \"AWSCURRENT\", // VersionStage defaults to AWSCURRENT if unspecified\n\t\t})\n\t);\n\tconst secret = JSON.parse(response.SecretString);\n\n\treturn secret;\n}\n\nexport const getAsmSalt = async () => {\n\tconst secret = await getSecret ();\n\treturn secret?.asmSalt;\n}\n\nexport const getSMTP = async () => {\n\tconst response = await client.send(\n\t\tnew GetSecretValueCommand({\n\t\t\tSecretId: `amfa/${process.env.TENANT_ID}/smtp`,\n\t\t\tVersionStage: \"AWSCURRENT\", // VersionStage defaults to AWSCURRENT if unspecified\n\t\t})\n\t);\n\tconst secret = JSON.parse(response.SecretString);\n\n\treturn secret;\n}\n"],
  "mappings": "6iBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,gBAAAE,EAAA,iBAAAC,EAAA,YAAAC,IAAA,eAAAC,EAAAL,GAAA,IAAAM,EAA+B,oCCA/B,IAAAC,EAGO,2CAEDC,EAAS,IAAI,uBAAqB,CACvC,OAAQ,QAAQ,IAAI,UACrB,CAAC,EAEYC,EAAY,SAAY,CACpC,IAAMC,EAAW,MAAMF,EAAO,KAC7B,IAAI,wBAAsB,CACzB,SAAU,QAAQ,QAAQ,IAAI,mBAC9B,aAAc,YACf,CAAC,CACF,EAGA,OAFe,KAAK,MAAME,EAAS,YAAY,CAGhD,EDjBA,IAAAC,EAAwB,uBAElBC,EAAa,CAAC,CAAE,UAAAC,EAAW,OAAAC,CAAO,IAAM,CAC1C,IAAMC,EAAkB,mBAAiB,cAAeD,EAAQ,EAAE,EAElE,OADgBC,EAAS,OAAOF,EAAW,SAAU,MAAM,EACxCE,EAAS,MAAM,MAAM,CAC5C,EAEMC,EAAa,MAAOC,EAAOC,EAAaC,IAAa,CAEvD,IAAMC,EAAS,CACX,UAAW,QAAQ,IAAI,gBACvB,IAAK,CACD,GAAI,CAAE,EAAGH,EAAM,KAAK,EAAI,IAAMC,GAAa,KAAK,CAAE,CACtD,CACJ,EAEMG,EAAS,MAAMF,EAAS,KAAK,IAAI,iBAAeC,CAAM,CAAC,EAE7D,QAAQ,IAAI,wBAAyBC,CAAM,EAE3C,IAAMC,EAAOD,EAAO,KAEpB,OAAIC,GAAQA,EAAK,MAEN,CACH,MAAOA,EAAK,MAAM,EAClB,YAAaA,EAAK,YAAY,EAC9B,MAAAL,CACJ,EAGG,IACX,EAGaM,EAAe,MAAOC,EAASL,IAAa,CACrD,GAAM,CAAE,MAAAF,EAAO,IAAAQ,CAAG,EAAID,EAEhBE,EAAa,MAAMV,EAAWC,EAAOQ,EAAKN,CAAQ,EAIxD,GAFA,QAAQ,IAAI,yBAA0BO,CAAU,EAE5CA,EAAY,CACZ,IAAML,EAASK,EAAW,MAEpBC,EAAS,MAAMC,EAAU,EACzBC,EAAcF,GAAQ,WACtBG,EAAYH,GAAQ,SAGpBI,EADe,GAAGF,IAAcC,IACIb,EAAM,UAAU,EAAGA,EAAM,OAAS,CAAC,EAEvEe,EADc,OAAO,KAAKD,EAAoB,MAAM,EAAE,SAAS,QAAQ,EACvC,UAAU,EAAG,EAAE,EAErD,OAAOnB,EAAW,CAAE,UAAWS,EAAQ,OAAQW,CAAkB,CAAC,EAItE,OAAO,IAEX,EAEaC,EAAU,MAAOhB,EAAOC,EAAaC,KACrC,MAAMH,EAAWC,EAAOC,EAAaC,CAAQ,IAC7C,YAGAe,EAAa,MAAOV,EAASL,EAAUgB,IAAY,CAE5D,OAAQA,EAAS,CACb,IAAK,IAED,OAAO,MAAMF,EAAQT,EAAQ,MAAOA,EAAQ,IAAKL,CAAQ,EAC7D,IAAK,IACD,OAAO,MAAMH,EAAWQ,EAAQ,MAAOA,EAAQ,IAAKL,CAAQ,EAEhE,QACI,KACR,CAEA,OAAO,IAEX",
  "names": ["get_exports", "__export", "getResData", "getSecretKey", "getTotp", "__toCommonJS", "import_client_dynamodb", "import_client_secrets_manager", "client", "getSecret", "response", "crypto", "aesDecrypt", "toDecrypt", "aesKey", "decipher", "readFromDB", "email", "provider_id", "dynamodb", "params", "result", "item", "getSecretKey", "payload", "pid", "readResult", "secret", "getSecret", "totp_secret", "totp_salt", "key_salt_and_email", "final_encrypt_key", "getTotp", "getResData", "getType"]
}
